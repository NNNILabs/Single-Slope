// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// output //
// ------ //

#define output_wrap_target 0
#define output_wrap 2

static const uint16_t output_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32           side 0     
    0x1041, //  1: jmp    x--, 1          side 1     
    0x0000, //  2: jmp    0               side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program output_program = {
    .instructions = output_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config output_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + output_wrap_target, offset + output_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

void output_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_config c = output_program_get_default_config(offset);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_sideset_pins(pio, sm, pin);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

// ----- //
// input //
// ----- //

#define input_wrap_target 0
#define input_wrap 5

static const uint16_t input_program_instructions[] = {
            //     .wrap_target
    0xa02b, //  0: mov    x, !null                   
    0x20a1, //  1: wait   1 pin, 1                   
    0x0044, //  2: jmp    x--, 4                     
    0x0005, //  3: jmp    5                          
    0x00c2, //  4: jmp    pin, 2                     
    0x4020, //  5: in     x, 32                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program input_program = {
    .instructions = input_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config input_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + input_wrap_target, offset + input_wrap);
    return c;
}

void input_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_config c = output_program_get_default_config(offset);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    sm_config_set_in_shift(&c, true, true, 32);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

